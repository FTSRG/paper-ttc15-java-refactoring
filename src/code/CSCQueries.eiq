pattern possibleCSC(concatSignature, methodSignature : TMethodSignature) {
	ClassListTrace.concatSignature(classListTrace, concatSignature);
	ClassListTrace.tClasses.signature(classListTrace, methodSignature);
	
	neg find childClassesWithDifferentParents(classListTrace, _, _);
}

pattern childClassesWithDifferentParents(classListTrace : ClassListTrace, classOne : TClass, classTwo : TClass){
	ClassListTrace.tClasses(classListTrace, classOne);
	ClassListTrace.tClasses(classListTrace, classTwo);
	find differentParents(classOne, classTwo);
}

pattern differentParents(classOne : TClass, classTwo : TClass) {
	TClass.parentClass(classOne, parentClassOne);
	TClass.parentClass(classTwo, parentClassTwo);
	parentClassOne != parentClassTwo;
} or {
	TClass(classTwo);
	find hasParent(classOne);
	neg find hasParent(classTwo);
} or {
	TClass(classOne);
	find hasParent(classTwo);
	neg find hasParent(classOne);
}

pattern hasParent(tClass : TClass) {
	TClass.parentClass(tClass, _);
}

pattern childClassesWithoutGivenMethodSignature(classListTrace : ClassListTrace, methodSignature : TMethodSignature, childClass : TClass) {
	ClassListTrace(classListTrace);
	ClassListTrace.tClasses(classListTrace, childClass);
	
	ClassListTrace.tClasses(classListTrace, childClassFixed);
	TClass.signature(childClassFixed, methodSignature);
	
	neg find childClassWithMethodSignature(childClass, methodSignature);
}

pattern childClassWithMethodSignature(childClass : TClass, methodSignature : TMethodSignature) {
	TClass.signature(childClass, methodSignature);
}

pattern classesOfClassListTrace(concatSignature, tClass : TClass) {
	ClassListTrace.concatSignature(classListTrace, concatSignature);
	ClassListTrace.tClasses(classListTrace, tClass);
}

pattern methodSignatureAndTrace(trace : MethodSignatureTrace, methodSignature : TMethodSignature) {
	MethodSignatureTrace.tMethodSignature(trace, methodSignature);
}

pattern packageWithName(tPackage : TPackage, packageName) {
	TPackage.tName(tPackage, packageName);
}

pattern typeGraphs(typeGraph : TypeGraph) {
	TypeGraph(typeGraph);
}

pattern methodsAccessingListSiblingMembers(classListTrace : ClassListTrace, methodDefinition : TMethodDefinition) {
	TMember.access(methodDefinition, accessedMember);
	TClass.defines(tClass, methodDefinition);
	TClass.defines(tClass, accessedMember);
	ClassListTrace.tClasses(classListTrace, tClass);
} or {
	TClass.defines(tClass, methodDefinition);
	TClass.defines(otherClass, accessedMember);
	TMember.access(methodDefinition, accessedMember);
	ClassListTrace.tClasses(classListTrace, tClass);
	ClassListTrace.tClasses(classListTrace, otherClass);
}

pattern listedClassMethodDefinitionsAccessingListSiblingMembers(classListTrace : ClassListTrace, methodSignature : TMethodSignature) {
	ClassListTrace.tClasses(classListTrace, childClass);
	TClass.defines(childClass, methodDefinition);
	TMethodSignature.definitions(methodSignature, methodDefinition);
	find methodsAccessingListSiblingMembers(classListTrace, methodDefinition);
}
